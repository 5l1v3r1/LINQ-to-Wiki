using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq.Expressions;
// <copyright file="ExpressionExtensionsTest.Switch.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>
using System;

namespace LinqToWiki.Expressions.Tests
{
    public partial class ExpressionExtensionsTest
    {

[TestMethod]
[PexGeneratedBy(typeof(ExpressionExtensionsTest))]
public void Switch499()
{
    BinaryExpression binaryExpression;
    binaryExpression = this.Switch((BinaryExpression)null);
    Assert.IsNull((object)binaryExpression);
}

[TestMethod]
[PexGeneratedBy(typeof(ExpressionExtensionsTest))]
public void Switch853()
{
    object o;
    BinaryExpression binaryExpression;
    BinaryExpression binaryExpression1;
    object boxb = (object)(default(bool));
    o = ConstantExpressionFactory.Create(boxb);
    binaryExpression = BinaryExpressionFactory.Create
                           (ExpressionType.AndAlso, (Expression)o, (Expression)o);
    binaryExpression1 = this.Switch(binaryExpression);
    Assert.IsNotNull((object)binaryExpression1);
    Assert.IsNotNull(binaryExpression1.Right);
    Assert.IsNotNull(binaryExpression1.Left);
    Assert.IsTrue
        (object.ReferenceEquals(binaryExpression1.Left, binaryExpression1.Right));
}

[TestMethod]
[PexGeneratedBy(typeof(ExpressionExtensionsTest))]
public void Switch85301()
{
    object o;
    BinaryExpression binaryExpression;
    BinaryExpression binaryExpression1;
    object s0 = new object();
    o = ConstantExpressionFactory.Create(s0);
    binaryExpression = BinaryExpressionFactory.Create
                           (ExpressionType.Coalesce, (Expression)o, (Expression)o);
    binaryExpression1 = this.Switch(binaryExpression);
    Assert.IsNotNull((object)binaryExpression1);
    Assert.IsNotNull(binaryExpression1.Right);
    Assert.IsNotNull(binaryExpression1.Left);
    Assert.IsTrue
        (object.ReferenceEquals(binaryExpression1.Left, binaryExpression1.Right));
}

[TestMethod]
[PexGeneratedBy(typeof(ExpressionExtensionsTest))]
public void Switch85302()
{
    object o;
    BinaryExpression binaryExpression;
    BinaryExpression binaryExpression1;
    object s0 = new object();
    o = ConstantExpressionFactory.Create(s0);
    binaryExpression = BinaryExpressionFactory.Create
                           (ExpressionType.Equal, (Expression)o, (Expression)o);
    binaryExpression1 = this.Switch(binaryExpression);
    Assert.IsNotNull((object)binaryExpression1);
    Assert.IsNotNull(binaryExpression1.Right);
    Assert.IsNotNull(binaryExpression1.Left);
    Assert.IsTrue
        (object.ReferenceEquals(binaryExpression1.Left, binaryExpression1.Right));
}

[TestMethod]
[PexGeneratedBy(typeof(ExpressionExtensionsTest))]
public void Switch85303()
{
    object o;
    BinaryExpression binaryExpression;
    BinaryExpression binaryExpression1;
    object boxi = (object)(default(int));
    o = ConstantExpressionFactory.Create(boxi);
    binaryExpression = BinaryExpressionFactory.Create
                           (ExpressionType.Equal, (Expression)o, (Expression)o);
    binaryExpression1 = this.Switch(binaryExpression);
    Assert.IsNotNull((object)binaryExpression1);
    Assert.IsNotNull(binaryExpression1.Right);
    Assert.IsNotNull(binaryExpression1.Left);
    Assert.IsTrue
        (object.ReferenceEquals(binaryExpression1.Left, binaryExpression1.Right));
}

[TestMethod]
[PexGeneratedBy(typeof(ExpressionExtensionsTest))]
public void Switch85304()
{
    object o;
    BinaryExpression binaryExpression;
    BinaryExpression binaryExpression1;
    object s0 = new object();
    o = ConstantExpressionFactory.Create(s0);
    binaryExpression = BinaryExpressionFactory.Create
                           (ExpressionType.NotEqual, (Expression)o, (Expression)o);
    binaryExpression1 = this.Switch(binaryExpression);
    Assert.IsNotNull((object)binaryExpression1);
    Assert.IsNotNull(binaryExpression1.Right);
    Assert.IsNotNull(binaryExpression1.Left);
    Assert.IsTrue
        (object.ReferenceEquals(binaryExpression1.Left, binaryExpression1.Right));
}

[TestMethod]
[PexGeneratedBy(typeof(ExpressionExtensionsTest))]
public void Switch85305()
{
    object o;
    BinaryExpression binaryExpression;
    BinaryExpression binaryExpression1;
    object boxd = (object)(default(double));
    o = ConstantExpressionFactory.Create(boxd);
    binaryExpression = BinaryExpressionFactory.Create
                           (ExpressionType.Power, (Expression)o, (Expression)o);
    binaryExpression1 = this.Switch(binaryExpression);
    Assert.IsNotNull((object)binaryExpression1);
    Assert.IsNotNull(binaryExpression1.Right);
    Assert.IsNotNull(binaryExpression1.Left);
    Assert.IsTrue
        (object.ReferenceEquals(binaryExpression1.Left, binaryExpression1.Right));
}

[TestMethod]
[PexGeneratedBy(typeof(ExpressionExtensionsTest))]
public void Switch85306()
{
    object o;
    object o1;
    BinaryExpression binaryExpression;
    BinaryExpression binaryExpression1;
    object s0 = new object();
    o = ConstantExpressionFactory.Create(s0);
    o1 = ConstantExpressionFactory.Create((object)null);
    binaryExpression = BinaryExpressionFactory.Create
                           (ExpressionType.NotEqual, (Expression)o, (Expression)o1);
    binaryExpression1 = this.Switch(binaryExpression);
    Assert.IsNotNull((object)binaryExpression1);
    Assert.IsNotNull(binaryExpression1.Right);
    Assert.IsNotNull(binaryExpression1.Left);
}
    }
}
