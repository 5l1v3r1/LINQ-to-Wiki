using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using LinqToWiki;
using LinqToWiki.Internals;
using Microsoft.Pex.Framework.Generated;
// <copyright file="NamespaceInfoTest.GetEnumerator.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>
using System;

namespace LinqToWiki.Internals.Tests
{
    public partial class NamespaceInfoTest
    {

[TestMethod]
[PexGeneratedBy(typeof(NamespaceInfoTest))]
public void GetEnumerator722()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      NamespaceInfo namespaceInfo;
      IEnumerator<Namespace> iEnumerator;
      Namespace[] namespaces = new Namespace[0];
      namespaceInfo = new NamespaceInfo((IEnumerable<Namespace>)namespaces);
      iEnumerator = this.GetEnumerator(namespaceInfo);
      disposables.Add((IDisposable)iEnumerator);
      disposables.Dispose();
      Assert.IsNotNull((object)namespaceInfo);
    }
}

[TestMethod]
[PexGeneratedBy(typeof(NamespaceInfoTest))]
public void GetEnumerator72201()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      object o;
      NamespaceInfo namespaceInfo;
      IEnumerator<Namespace> iEnumerator;
      o = NamespaceFactory.Create(0);
      Namespace[] namespaces = new Namespace[1];
      namespaces[0] = (Namespace)o;
      namespaceInfo = new NamespaceInfo((IEnumerable<Namespace>)namespaces);
      iEnumerator = this.GetEnumerator(namespaceInfo);
      disposables.Add((IDisposable)iEnumerator);
      disposables.Dispose();
      Assert.IsNotNull((object)namespaceInfo);
    }
}

[TestMethod]
[PexGeneratedBy(typeof(NamespaceInfoTest))]
public void GetEnumerator72206()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      object o;
      NamespaceInfo namespaceInfo;
      IEnumerator<Namespace> iEnumerator;
      o = NamespaceFactory.Create(527);
      Namespace[] namespaces = new Namespace[1];
      namespaces[0] = (Namespace)o;
      namespaceInfo = new NamespaceInfo((IEnumerable<Namespace>)namespaces);
      iEnumerator = this.GetEnumerator(namespaceInfo);
      disposables.Add((IDisposable)iEnumerator);
      disposables.Dispose();
      Assert.IsNotNull((object)namespaceInfo);
    }
}

[TestMethod]
[PexGeneratedBy(typeof(NamespaceInfoTest))]
public void GetEnumerator72207()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      object o;
      object o1;
      object o2;
      object o3;
      NamespaceInfo namespaceInfo;
      IEnumerator<Namespace> iEnumerator;
      o = NamespaceFactory.Create(0);
      o1 = NamespaceFactory.Create(62999840);
      o2 = NamespaceFactory.Create(int.MinValue);
      o3 = NamespaceFactory.Create(-2147483646);
      Namespace[] namespaces = new Namespace[4];
      namespaces[0] = (Namespace)o;
      namespaces[1] = (Namespace)o1;
      namespaces[2] = (Namespace)o2;
      namespaces[3] = (Namespace)o3;
      namespaceInfo = new NamespaceInfo((IEnumerable<Namespace>)namespaces);
      iEnumerator = this.GetEnumerator(namespaceInfo);
      disposables.Add((IDisposable)iEnumerator);
      disposables.Dispose();
      Assert.IsNotNull((object)namespaceInfo);
    }
}
    }
}
